

--1. Query all the details from customers who belong to the state of Delhi.
Select * from Customers where state = 'Delhi'

--2. Name all the Products which 'FITLINE SPORTS' deals with.
Select distinct Product_Name from Products 

--3. What is  the price of all products in the Swimming Categories?

Select * from Products where product_id like 'S%'

--4. List all the orders placed in the month of April.

Select * from orders where month(order_date) = 4

--5. List the total value for each and every product owned by 'FITLINE SPORTS'.

Select *,(Price*Quantity) as Total_Value from Products

--6.how many products are there in each category?

Select Category ,Count(Product_Name) as NO_OF_PRODUCTS from Products group by Category 

--7. Find the Average of the Total Value of the Products.

Select AVG(Price*Quantity) as Total_Value from Products 

--8. Display all the cities in the state of Punjab.

Select the distinct city  from Customers where state = 'Punjab'

--9.. Show the customer details who have never placed an order.

SELECT * FROM Customers WHERE customer_id NOT IN ( SELECT DISTINCT customer_id FROM Orders);

--10. Retrieve the customer details along with their corresponding orders.

Select *
from Customers as C
join orders as O on O.Customer_id = C.Customer_id

--11. List all orders with the customer's first name, last name, productid and order date.

Select C.first_name,C.last_name, O.*
from Customers as C
join orders as O on O.Customer_id = C.Customer_id

--12. List all orders with the customer's city and the product category.

select O.* ,C.City, P.category
from Customers as C 
join Orders as O on o.Customer_id = C.Customer_id
join Products as p  on o.product_id = P.product_id


--13. Give all information regarding a customer named 'Priya Gupta'. Also, Give the Amount she spends on each product.

Select O.Order_Id,P.product_id,P.Product_Name ,(P. price * O.quantity) as TotalAmountSpend
from Orders as O
join Products as P on o.product_id = P.product_id
join Customers as C  on  o.customer_id = C.customer_id
where C.first_name ='Priya' and C.last_name = 'Gupta'

--14. List the customer’s name with his/her respective Customer ids who placed the highest total order amounts.

Select  top 1  C.First_Name, O.customer_id, (P. price * O.quantity) as Total_ordering_Cost 
from Orders as O
join Products as P on o.product_id = P.product_id
join Customers as C  on  o.customer_id = C.customer_id
order by Total_ordering_Cost desc

--15. Lists all the products with their respective quantity placed in the order.

Select P.Product_Name,MAx(O.Quantity) as Quantity_Placed 
from Products as P  
left join Orders as O
on O.product_id = P.product_id
group by P.Product_Name 
order by MAx(O.Quantity) desc

--16. List all products along with the customer who placed the highest quantity order for each product.

Select P.Product_Name ,C.first_name, MAx(O.quantity) as highest_quantity_order
from Products as P
left Join Orders as O on O.product_id = P.product_id
left Join Customers as C on O.Customer_id = C.customer_id
group by  P.Product_Name ,C.first_name
order by MAX(O.quantity) desc

--17. Calculate the total revenue generated by for the month of April. Also Add the product and Order information.

Select O.Order_Id,P.product_id,P.product_Name,P.Price ,O.Quantity,(P.Price*O.quantity) as Total_price 
from Products as P
right  join Orders as O 
on O.product_id = P.product_id
where month(O.order_date) = '4'

--18. For the ease of 'FITLINE SPORTS' assist them to classify all the products into different categories according to their price 

Select Product_Name, Price,  Case  
when price > '14000'  then 'High Price'
when price > '8000'  then 'Moderate Price'
when price > '2000'  then 'Low Price'
else  'Extreme Low Price' 
end as  Product_Classification
from Products 

--19. In the given period 'FITLINE SPORTS' wanted to know about the 'TOP 25 CUSTOMERS' who spend the most while ordering,
help them to get all those customers' information with their total value spent. 

Select TOP 25 (P.price*O.quantity) as TOTALORDERINGVALUE , C.*
from Orders as O
left join Products as P on O.product_id = P.product_id 
 join Customers as C on O.Customer_id = C.customer_id
order by TOTALORDERINGVALUE desc


--20."FITLINE SPORTS" aimed to contrast the MAX, MIN, AVERAGE, AND COUNT of its products with those of similar products in the same category. 
Aid them in comparing product prices

Select Product_name, Category, Price,
   MAX(Price) over  (Partition by category)  as Max_score,
  MIN(Price) over  (Partition by Category)  as Min_score,
  AVG(Price) over  (Partition by Category) as Avg_score,
  Count(Price) over  (Partition by Category)  as Count_score
from Products 


--21. "FITLINE SPORTS" is situated in Maharashtra since they don't want orders from other states to get mixed up with theirs. 
Assist them in sorting out all the data on the state of Maharashtra. in order for them to avoid any sort of conflict

Create View Maharashtra_Orders
 as
 Select  C.*,
 P.product_id, P.Product_Name, P.category,
 O.quantity,O.order_id,O.order_date
 from Customers as C 
 join Orders as O on c.customer_id = O.customer_id
 join Products as P on P.Product_id = O.product_id
 where c.state = 'Maharashtra'

Select * from  Maharashtra_Orders


--22. Assist 'FITLINE SPORTS' to classify Customers according to their expenditure 

Select customer_id ,First_name,last_name,
Case 
when total_expenditure > 45000 then 'High Spender'
when total_expenditure > 25000 then 'Moderate Spender'
when total_expenditure > 10000 then 'Low Spender'
else 'Extreme Low Spender'
end as Expenditure_Classification
from
 ( SELECT c.customer_id,c.first_name,c.last_name,SUM(p.price * o.quantity) AS total_expenditure
    FROM Customers c
    JOIN Orders o ON c.customer_id = o.customer_id
    JOIN Products p ON o.product_id = p.product_id
    GROUP BY c.customer_id,c.first_name,c.last_name
    ) AS customer_expenditure


--23. determine the rank of each product's revenue within its category, assigning the rank as "Top Seller" for the products with the highest revenue.Select P.Product_Name ,(p.price * o.quantity) as Total_Value, P.Category,

Select P.Product_Name ,(p.price * o.quantity) as Total_Value, P.Category,
ROW_NUMBER () over (Partition by P.Category order by (p.price * o.quantity)) as Rank  
from orders as O 
right JOIN Products p ON o.product_id = p.product_id

 
--24 After a meeting held in 'FITLINE SPORTS', It was decided to increase the price by 34% for all products in each category. 
Create a Procedure for the same. Create Procedure New_price 

AS
update Products 
set Price = (Price*0.34)
GO 

EXEC New_price

Select Price From Products



--25. Create a CTE to find the customers who have made orders in the past 20 days.

With  CTE1 as
(Select Customer_id from orders where DATEDIFF(DD,order_date,GETDATE()) < 20 )
Select First_Name ,Last_Name 
from Customers
join CTE1 
on Customers.customer_id = CTE1.customer_id


--26. FITLINESPORTS want their all- customers’ orders and product information within one roof.
They also want to get all information regarding all the multiples order placed.
Assist them  So that it will become easy for them to get all their information in one table only.

Create View Customer_Information
As 
Select C.*, P.product_id,P.Product_Name, P.price, O.quantity, (p.price * o.quantity) as total_Value, O.order_id,O.order_date
from Customers as C  
left join Orders as O ON o.customer_id = C.customer_id
left join PRoducts as P ON o.product_id = p.product_id

Select * from  Customer_Information



